--- a/net/minecraft/world/gen/NoiseChunkGenerator.java
+++ b/net/minecraft/world/gen/NoiseChunkGenerator.java
@@ -127,6 +127,17 @@
 
    }
 
+   @Override
+   public com.mojang.serialization.MapCodec<ChunkGenerator> dispatch(net.minecraft.util.RegistryKey<net.minecraft.world.Dimension> key, net.minecraft.util.registry.WorldSettingsImport<com.google.gson.JsonElement> parser) {
+      return RecordCodecBuilder.<NoiseChunkGenerator>mapCodec(inst ->
+              inst.group(
+                      this.field_222542_c.dispatch(key, parser).forGetter(cg -> cg.field_222542_c),
+                      com.mojang.serialization.MapCodec.unit(this.field_236084_w_).forGetter(cg -> cg.field_236084_w_),
+                      com.mojang.serialization.MapCodec.unit(()->this.field_236080_h_).forGetter(cg -> cg.field_236080_h_)
+              ).apply(inst, NoiseChunkGenerator::new)
+      ).xmap(cg -> cg, cg -> (NoiseChunkGenerator) cg);
+   }
+
    protected Codec<? extends ChunkGenerator> func_230347_a_() {
       return field_236079_d_;
    }
@@ -525,8 +536,8 @@
                         objectlistiterator1.back(objectlist1.size());
                         BlockState blockstate = this.func_236086_a_(d18, i2);
                         if (blockstate != field_222562_i) {
-                           if (blockstate.func_185906_d() != 0) {
-                              blockpos$mutable.func_181079_c(i3, i2, l3);
+                           blockpos$mutable.func_181079_c(i3, i2, l3);
+                           if (blockstate.getLightValue(chunkprimer, blockpos$mutable) != 0) {
                               chunkprimer.func_201637_h(blockpos$mutable);
                            }
 
